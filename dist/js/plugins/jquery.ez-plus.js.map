{"version":3,"names":[],"mappings":"","sources":["plugins/jquery.ez-plus.js"],"sourcesContent":["// jscs:disable\n/* jshint -W071, -W074 */\n// jscs:enable\n/* globals jQuery */\n/*\n * jQuery ezPlus 1.2.5\n * Demo's and documentation:\n * http://igorlino.github.io/elevatezoom-plus/\n *\n * licensed under MIT license.\n * http://en.wikipedia.org/wiki/MIT_License\n *\n */\n\nif (typeof Object.create !== 'function') {\n    Object.create = function (obj) {\n        function F() {\n        }\n\n        F.prototype = obj;\n        return new F();\n    };\n}\n\n(function ($, window, document) {\n    var EZP = {\n        init: function (options, elem) {\n            var self = this;\n\n            self.elem = elem;\n            self.$elem = $(elem);\n\n            self.options = $.extend({}, $.fn.ezPlus.options, self.responsiveConfig(options || {}));\n\n            self.imageSrc = self.$elem.attr('data-'+self.options.attrImageZoomSrc) ? self.$elem.attr('data-'+self.options.attrImageZoomSrc) : self.$elem.attr('src');\n\n            if (!self.options.enabled) {\n                return;\n            }\n\n            //TINT OVERRIDE SETTINGS\n            if (self.options.tint) {\n                self.options.lensColour = 'transparent'; //colour of the lens background\n                self.options.lensOpacity = '1'; //opacity of the lens\n            }\n            //INNER OVERRIDE SETTINGS\n            if (self.options.zoomType === 'inner') {\n                self.options.showLens = false;\n            }\n\n            // LENS OVERRIDE SETTINGS\n            if (self.options.zoomType === 'lens') {\n                self.options.zoomWindowWidth = 0;\n            }\n\n            //UUID WHEN MISSING IDENTIFIER\n            if (self.options.zoomId === -1) {\n                self.options.zoomId = generateUUID();\n            }\n\n            //Remove alt on hover\n\n            self.$elem.parent().removeAttr('title').removeAttr('alt');\n\n            self.zoomImage = self.imageSrc;\n\n            self.refresh(1);\n\n            //Create the image swap from the gallery\n            var galleryEvent = self.options.galleryEvent + '.ezpspace';\n            galleryEvent += self.options.touchEnabled ? ' touchend.ezpspace' : '';\n            self.$galleries = $(self.options.gallery ? ('#' + self.options.gallery) : self.options.gallerySelector);\n            self.$galleries.on(galleryEvent, self.options.galleryItem, function (e) {\n\n                //Set a class on the currently active gallery image\n                if (self.options.galleryActiveClass) {\n                    $(self.options.galleryItem, self.$galleries).removeClass(self.options.galleryActiveClass);\n                    $(this).addClass(self.options.galleryActiveClass);\n                }\n                //stop any link on the a tag from working\n                if (this.tagName === 'A') {\n                    e.preventDefault();\n                }\n\n                //call the swap image function\n                if ($(this).data(self.options.attrImageZoomSrc)) {\n                    self.zoomImagePre = $(this).data(self.options.attrImageZoomSrc);\n                }\n                else {\n                    self.zoomImagePre = $(this).data('image');\n                }\n                self.swaptheimage($(this).data('image'), self.zoomImagePre);\n                if (this.tagName === 'A') {\n                    return false;\n                }\n            });\n            function generateUUID() {\n                var d = new Date().getTime();\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                    var r = (d + Math.random() * 16) % 16 | 0; // jshint ignore:line\n                    d = Math.floor(d / 16); // jshint ignore:line\n                    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16); // jshint ignore:line\n                });\n                return uuid;\n            }\n        },\n        refresh: function (length) {\n            var self = this;\n\n            setTimeout(function () {\n                self.fetch(self.imageSrc, self.$elem, self.options.minZoomLevel);\n\n            }, length || self.options.refresh);\n        },\n        fetch: function (imgsrc, element, minZoom) {\n            //get the image\n            var self = this;\n            var newImg = new Image();\n            newImg.onload = function () {\n                //set the large image dimensions - used to calculte ratio's\n                if (newImg.width / element.width() <= minZoom) {\n                    self.largeWidth = element.width() * minZoom;\n                } else {\n                    self.largeWidth = newImg.width;\n                }\n                if (newImg.height / element.height() <= minZoom) {\n                    self.largeHeight = element.height() * minZoom;\n                } else {\n                    self.largeHeight = newImg.height;\n                }\n                //once image is loaded start the calls\n                self.startZoom();\n                self.currentImage = self.imageSrc;\n                //let caller know image has been loaded\n                self.options.onZoomedImageLoaded(self.$elem);\n            };\n            self.setImageSource(newImg, imgsrc); // this must be done AFTER setting onload\n\n            return;\n        },\n        setImageSource: function (image, src) {\n            //sets an image's source.\n            image.src = src;\n        },\n        startZoom: function () {\n            var self = this;\n            //get dimensions of the non zoomed image\n            self.nzWidth = self.$elem.width();\n            self.nzHeight = self.$elem.height();\n\n            //activated elements\n            self.isWindowActive = false;\n            self.isLensActive = false;\n            self.isTintActive = false;\n            self.overWindow = false;\n\n            //CrossFade Wrapper\n            if (self.options.imageCrossfade) {\n                var elementZoomWrapper = $('<div class=\"zoomWrapper\"/>')\n                    .css({\n                        height: self.nzHeight,\n                        width: self.nzWidth\n                    });\n                if(self.$elem.parent().hasClass('zoomWrapper')){\n                    self.$elem.unwrap();\n                }\n                self.zoomWrap = self.$elem.wrap(elementZoomWrapper);\n                self.$elem.css({\n                    position: 'absolute'\n                });\n            }\n\n            self.zoomLock = 1;\n            self.scrollingLock = false;\n            self.changeBgSize = false;\n            self.currentZoomLevel = self.options.zoomLevel;\n\n            //get offset of the non zoomed image\n            self.updateOffset(self);\n            //calculate the width ratio of the large/small image\n            self.widthRatio = (self.largeWidth / self.currentZoomLevel) / self.nzWidth;\n            self.heightRatio = (self.largeHeight / self.currentZoomLevel) / self.nzHeight;\n\n            function getWindowZoomStyle() {\n                return {\n                    display: 'none',\n                    position: 'absolute',\n                    height: self.options.zoomWindowHeight,\n                    width: self.options.zoomWindowWidth,\n                    border: '' + self.options.borderSize + 'px solid ' + self.options.borderColour,\n                    backgroundSize: '' + (self.largeWidth / self.currentZoomLevel) + 'px ' + (self.largeHeight / self.currentZoomLevel) + 'px',\n                    backgroundPosition: '0px 0px',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundColor: '' + self.options.zoomWindowBgColour,\n                    overflow: 'hidden',\n                    zIndex: 100\n                };\n            }\n\n            //if window zoom\n            if (self.options.zoomType === 'window') {\n                self.zoomWindowStyle = getWindowZoomStyle();\n            }\n\n            function getInnerZoomStyle() {\n                //has a border been put on the image? Lets cater for this\n                var borderWidth = self.$elem.css('border-left-width');\n\n                if (self.options.scrollZoom)\n                    self.zoomLens = $('<div class=\"zoomLens\"/>');\n\n                return {\n                    display: 'none',\n                    position: 'absolute',\n                    height: self.nzHeight,\n                    width: self.nzWidth,\n                    marginTop: borderWidth,\n                    marginLeft: borderWidth,\n                    border: '' + self.options.borderSize + 'px solid ' + self.options.borderColour,\n                    backgroundPosition: '0px 0px',\n                    backgroundRepeat: 'no-repeat',\n                    cursor: self.options.cursor,\n                    overflow: 'hidden',\n                    zIndex: self.options.zIndex\n                };\n            }\n\n            //if inner  zoom\n            if (self.options.zoomType === 'inner') {\n                self.zoomWindowStyle = getInnerZoomStyle();\n            }\n\n            function getWindowLensStyle() {\n                // adjust images less than the window height\n\n                if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {\n                    self.lensHeight = self.nzHeight;\n                }\n                else {\n                    self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;\n                }\n                if (self.largeWidth < self.options.zoomWindowWidth) {\n                    self.lensWidth = self.nzWidth;\n                }\n                else {\n                    self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;\n                }\n\n                return {\n                    display: 'none',\n                    position: 'absolute',\n                    height: self.lensHeight,\n                    width: self.lensWidth,\n                    border: '' + self.options.lensBorderSize + 'px' + ' solid ' + self.options.lensBorderColour,\n                    backgroundPosition: '0px 0px',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundColor: self.options.lensColour,\n                    opacity: self.options.lensOpacity,\n                    cursor: self.options.cursor,\n                    zIndex: 999,\n                    overflow: 'hidden'\n                };\n            }\n\n            //lens style for window zoom\n            if (self.options.zoomType === 'window') {\n                self.lensStyle = getWindowLensStyle();\n            }\n\n            //tint style\n            self.tintStyle = {\n                display: 'block',\n                position: 'absolute',\n                height: self.nzHeight,\n                width: self.nzWidth,\n                backgroundColor: self.options.tintColour,\n                opacity: 0\n            };\n\n            //lens style for lens zoom with optional round for modern browsers\n            self.lensRound = {};\n\n            if (self.options.zoomType === 'lens') {\n                self.lensStyle = {\n                    display: 'none',\n                    position: 'absolute',\n                    float: 'left',\n                    height: self.options.lensSize,\n                    width: self.options.lensSize,\n                    border: '' + self.options.borderSize + 'px solid ' + self.options.borderColour,\n                    backgroundPosition: '0px 0px',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundColor: self.options.lensColour,\n                    cursor: self.options.cursor\n                };\n            }\n\n            //does not round in all browsers\n            if (self.options.lensShape === 'round') {\n                self.lensRound = {\n                    borderRadius: self.options.lensSize / 2 + self.options.borderSize\n                };\n            }\n\n            //create the div's                                                + \"\"\n            //self.zoomContainer = $('<div/>').addClass('zoomContainer').css({\"position\":\"relative\", \"height\":self.nzHeight, \"width\":self.nzWidth});\n\n            self.zoomContainer = $('<div class=\"' + self.options.container + '\" ' + 'uuid=\"' + self.options.zoomId + '\"/>');\n            self.zoomContainer.css({\n                position: 'absolute',\n                top: self.nzOffset.top,\n                left: self.nzOffset.left,\n                height: self.nzHeight,\n                width: self.nzWidth,\n                zIndex: self.options.zIndex\n            });\n            if (self.$elem.attr('id')) {\n                self.zoomContainer.attr('id', self.$elem.attr('id') + '-' + self.options.container);\n            }\n            $('.' + self.options.container + '[uuid=\"' + self.options.zoomId + '\"]').remove();\n            $(self.options.zoomContainerAppendTo).append(self.zoomContainer);\n\n            //this will add overflow hidden and contrain the lens on lens mode\n            if (self.options.containLensZoom && self.options.zoomType === 'lens') {\n                self.zoomContainer.css('overflow', 'hidden');\n            }\n            if (self.options.zoomType !== 'inner') {\n                self.zoomLens = $('<div class=\"zoomLens\"/>')\n                    .css($.extend({}, self.lensStyle, self.lensRound))\n                    .appendTo(self.zoomContainer)\n                    .click(function () {\n                        self.$elem.trigger('click');\n                    });\n\n                if (self.options.tint) {\n                    self.tintContainer = $('<div class=\"tintContainer\"/>');\n                    self.zoomTint = $('<div class=\"zoomTint\"/>').css(self.tintStyle);\n\n                    self.zoomLens.wrap(self.tintContainer);\n\n                    self.zoomTintcss = self.zoomLens.after(self.zoomTint);\n\n                    //if tint enabled - set an image to show over the tint\n\n                    self.zoomTintImage = $('<img src=\"' + self.$elem.attr('src') + '\">')\n                        .css({\n                            position: 'absolute',\n                            top: 0,\n                            left: 0,\n                            height: self.nzHeight,\n                            width: self.nzWidth,\n                            maxWidth: 'none'\n                        })\n                        .appendTo(self.zoomLens)\n                        .click(function () {\n                            self.$elem.trigger('click');\n                        });\n                }\n            }\n\n            //create zoom window\n            var targetZoomContainer = isNaN(self.options.zoomWindowPosition) ? 'body' : self.zoomContainer;\n            self.zoomWindow = $('<div class=\"zoomWindow\"/>')\n                .css($.extend({\n                    zIndex: 999,\n                    top: self.windowOffsetTop,\n                    left: self.windowOffsetLeft,\n                }, self.zoomWindowStyle))\n                .appendTo(targetZoomContainer).click(function () {\n                    self.$elem.trigger('click');\n                });\n            self.zoomWindowContainer = $('<div class=\"zoomWindowContainer\" />')\n                .css({\n                    width: self.options.zoomWindowWidth\n                });\n            self.zoomWindow.wrap(self.zoomWindowContainer);\n\n            if (self.options.zoomType === 'lens') {\n                self.zoomContainer.css('display', 'none');\n                self.zoomLens.css({\n                    backgroundImage: 'url(\"' + self.imageSrc + '\")'\n                });\n            }\n            if (self.options.zoomType === 'window') {\n                self.zoomWindow.css({\n                    backgroundImage: 'url(\"' + self.imageSrc + '\")'\n                });\n            }\n            if (self.options.zoomType === 'inner') {\n                self.zoomWindow.css({\n                    backgroundImage: 'url(\"' + self.imageSrc + '\")'\n                });\n            }\n\n            /*-------------------END THE ZOOM WINDOW AND LENS----------------------------------*/\n            if (self.options.touchEnabled) {\n                //touch events\n                self.$elem.on('touchmove.ezpspace', function (e) {\n                    e.preventDefault();\n                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\n                    self.setPosition(touch);\n                });\n                self.zoomContainer.on('touchmove.ezpspace', function (e) {\n                    self.setElements('show');\n                    e.preventDefault();\n                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\n                    self.setPosition(touch);\n\n                });\n                self.zoomContainer\n                    .add(self.$elem)\n                    .on('touchend.ezpspace', function (e) {\n                        self.showHideWindow('hide');\n                        if (self.options.showLens) {\n                            self.showHideLens('hide');\n                        }\n                        if (self.options.tint && self.options.zoomType !== 'inner') {\n                            self.showHideTint('hide');\n                        }\n                    });\n\n                if (self.options.showLens) {\n                    self.zoomLens.on('touchmove.ezpspace', function (e) {\n\n                        e.preventDefault();\n                        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];\n                        self.setPosition(touch);\n                    });\n\n                    self.zoomLens.on('touchend.ezpspace', function (e) {\n                        self.showHideWindow('hide');\n                        if (self.options.showLens) {\n                            self.showHideLens('hide');\n                        }\n                        if (self.options.tint && self.options.zoomType !== 'inner') {\n                            self.showHideTint('hide');\n                        }\n                    });\n                }\n            }\n\n            // Needed to work in IE\n            self.zoomContainer.on('click.ezpspace touchstart.ezpspace', self.options.onImageClick);\n\n            self.zoomContainer\n                .add(self.$elem)\n                .on('mousemove.ezpspace', function (e) {\n                    if (self.overWindow === false) {\n                        self.setElements('show');\n                    }\n                    mouseMoveZoomHandler(e);\n                });\n\n            function mouseMoveZoomHandler(e) {\n                //self.overWindow = true;\n                //make sure on orientation change the setposition is not fired\n                if (self.lastX !== e.clientX || self.lastY !== e.clientY) {\n                    self.setPosition(e);\n                    self.currentLoc = e;\n                }\n                self.lastX = e.clientX;\n                self.lastY = e.clientY;\n            }\n\n            var elementToTrack = null;\n            if (self.options.zoomType !== 'inner') {\n                elementToTrack = self.zoomLens;\n            }\n            if (self.options.tint && self.options.zoomType !== 'inner') {\n                elementToTrack = self.zoomTint;\n            }\n            if (self.options.zoomType === 'inner') {\n                elementToTrack = self.zoomWindow;\n            }\n\n            //register the mouse tracking\n            if (elementToTrack) {\n                elementToTrack.on('mousemove.ezpspace', mouseMoveZoomHandler);\n            }\n\n            //  lensFadeOut: 500,  zoomTintFadeIn\n            self.zoomContainer\n                .add(self.$elem)\n                .hover(function () {\n                    if (self.overWindow === false) {\n                        self.setElements('show');\n                    }\n                }, function () {\n                    if (!self.scrollLock) {\n                        self.setElements('hide');\n                        self.options.onDestroy(self.$elem);\n                    }\n                });\n            //end ove image\n\n            if (self.options.zoomType !== 'inner') {\n                self.zoomWindow.hover(function () {\n                    self.overWindow = true;\n                    self.setElements('hide');\n                }, function () {\n                    self.overWindow = false;\n                });\n            }\n            //end ove image\n\n            // var delta = parseInt(e.originalEvent.wheelDelta || -e.originalEvent.detail);\n\n            //      $(this).empty();\n            //    return false;\n\n            //fix for initial zoom setting\n            //if (self.options.zoomLevel !== 1) {\n            //    \tself.changeZoomLevel(self.currentZoomLevel);\n            //}\n            //set the min zoomlevel\n            if (self.options.minZoomLevel) {\n                self.minZoomLevel = self.options.minZoomLevel;\n            }\n            else {\n                self.minZoomLevel = self.options.scrollZoomIncrement * 2;\n            }\n\n            if (self.options.scrollZoom) {\n                //see compatibility of mouse events at https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel\n                self.zoomContainer.add(self.$elem).on('wheel DOMMouseScroll MozMousePixelScroll', function (e) {\n                    // in IE there is issue with firing of mouseleave - So check whether still scrolling\n                    // and on mouseleave check if scrolllock\n                    self.scrollLock = true;\n                    clearTimeout($.data(this, 'timer'));\n                    $.data(this, 'timer', setTimeout(function () {\n                        self.scrollLock = false;\n                        //do something\n                    }, 250));\n\n                    var theEvent = e.originalEvent.deltaY || e.originalEvent.detail * -1;\n\n                    //this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;\n                    //   e.preventDefault();\n\n                    e.stopImmediatePropagation();\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    if (theEvent === 0) {\n                        // fixes last event inversion bug\n                        return false;\n                    }\n                    var nextZoomLevel;\n                    if (theEvent / 120 > 0) {\n                        nextZoomLevel = parseFloat(self.currentZoomLevel) - self.options.scrollZoomIncrement;\n                        //scrolling up\n                        if (nextZoomLevel >= parseFloat(self.minZoomLevel)) {\n                            self.changeZoomLevel(nextZoomLevel);\n                        }\n                    }\n                    else {\n                        //scrolling down\n\n                        //Check if it has to maintain original zoom window aspect ratio or not\n                        if ((!self.fullheight && !self.fullwidth) || !self.options.mantainZoomAspectRatio) {\n                            nextZoomLevel = parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement;\n\n                            if (self.options.maxZoomLevel) {\n                                if (nextZoomLevel <= self.options.maxZoomLevel) {\n                                    self.changeZoomLevel(nextZoomLevel);\n                                }\n                            }\n                            else {\n                                //andy\n                                self.changeZoomLevel(nextZoomLevel);\n                            }\n                        }\n                    }\n                    return false;\n                });\n            }\n        },\n        destroy: function () {\n            var self = this;\n            self.$elem.off('.ezpspace');\n            self.$galleries.off('.ezpspace');\n            $(self.zoomContainer).remove();\n            if (self.options.loadingIcon && !!self.spinner && !!self.spinner.length) {\n                self.spinner.remove();\n                delete self.spinner;\n            }\n        },\n        getIdentifier: function () {\n            var self = this;\n            return self.options.zoomId;\n        },\n        setElements: function (type) {\n            var self = this;\n            if (!self.options.zoomEnabled) {\n                return false;\n            }\n            if (type === 'show') {\n                if (self.isWindowSet) {\n                    if (self.options.zoomType === 'inner') {\n                        self.showHideWindow('show');\n                    }\n                    if (self.options.zoomType === 'window') {\n                        self.showHideWindow('show');\n                    }\n                    if (self.options.showLens) {\n                        self.showHideZoomContainer('show');\n                        self.showHideLens('show');\n                    }\n                    if (self.options.tint && self.options.zoomType !== 'inner') {\n                        self.showHideTint('show');\n                    }\n                }\n            }\n\n            if (type === 'hide') {\n                if (self.options.zoomType === 'window') {\n                    self.showHideWindow('hide');\n                }\n                if (!self.options.tint) {\n                    self.showHideWindow('hide');\n                }\n                if (self.options.showLens) {\n                    self.showHideZoomContainer('hide');\n                    self.showHideLens('hide');\n                }\n                if (self.options.tint) {\n                    self.showHideTint('hide');\n                }\n            }\n        },\n        setPosition: function (e) {\n\n            var self = this;\n\n            if (!self.options.zoomEnabled || e === undefined) {\n                return false;\n            }\n\n            //recaclc offset each time in case the image moves\n            //this can be caused by other on page elements\n            self.nzHeight = self.$elem.height();\n            self.nzWidth = self.$elem.width();\n            self.updateOffset(self);\n\n            if (self.options.tint && self.options.zoomType !== 'inner') {\n                self.zoomTint.css({\n                    top: 0,\n                    left: 0\n                });\n            }\n            //set responsive\n            //will checking if the image needs changing before running this code work faster?\n            if (self.options.responsive && !self.options.scrollZoom) {\n                if (self.options.showLens) {\n                    var lensHeight, lensWidth;\n                    if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {\n                        self.lensHeight = self.nzHeight;\n                    }\n                    else {\n                        self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;\n                    }\n                    if (self.largeWidth < self.options.zoomWindowWidth) {\n                        self.lensWidth = self.nzWidth;\n                    }\n                    else {\n                        self.lensWidth = (self.options.zoomWindowWidth / self.widthRatio);\n                    }\n                    self.widthRatio = self.largeWidth / self.nzWidth;\n                    self.heightRatio = self.largeHeight / self.nzHeight;\n                    if (self.options.zoomType !== 'lens') {\n                        //possibly dont need to keep recalcalculating\n                        //if the lens is heigher than the image, then set lens size to image size\n                        if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {\n                            self.lensHeight = self.nzHeight;\n\n                        }\n                        else {\n                            self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;\n                        }\n\n                        if (self.nzWidth < self.options.zoomWindowHeight / self.heightRatio) {\n                            self.lensWidth = self.nzWidth;\n                        }\n                        else {\n                            self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;\n                        }\n\n                        self.zoomLens.css({\n                            width: self.lensWidth,\n                            height: self.lensHeight\n                        });\n\n                        if (self.options.tint) {\n                            self.zoomTintImage.css({\n                                width: self.nzWidth,\n                                height: self.nzHeight\n                            });\n                        }\n\n                    }\n                    if (self.options.zoomType === 'lens') {\n                        self.zoomLens.css({\n                            width: self.options.lensSize,\n                            height: self.options.lensSize\n                        });\n                    }\n                    //end responsive image change\n                }\n            }\n\n            //container fix\n            self.zoomContainer.css({\n                top: self.nzOffset.top,\n                left: self.nzOffset.left,\n                width: self.nzWidth,  // new code\n                height: self.nzHeight // new code\n            });\n            self.mouseLeft = parseInt(e.pageX - self.pageOffsetX - self.nzOffset.left);\n            self.mouseTop = parseInt(e.pageY - self.pageOffsetY - self.nzOffset.top);\n            //calculate the Location of the Lens\n\n            //calculate the bound regions - but only if zoom window\n            if (self.options.zoomType === 'window') {\n                var zoomLensHeight = self.zoomLens.height() / 2;\n                var zoomLensWidth = self.zoomLens.width() / 2;\n                self.Etoppos = (self.mouseTop < 0 + zoomLensHeight);\n                self.Eboppos = (self.mouseTop > self.nzHeight - zoomLensHeight - (self.options.lensBorderSize * 2));\n                self.Eloppos = (self.mouseLeft < 0 + zoomLensWidth);\n                self.Eroppos = (self.mouseLeft > (self.nzWidth - zoomLensWidth - (self.options.lensBorderSize * 2)));\n            }\n            //calculate the bound regions - but only for inner zoom\n            if (self.options.zoomType === 'inner') {\n                self.Etoppos = (self.mouseTop < ((self.nzHeight / 2) / self.heightRatio));\n                self.Eboppos = (self.mouseTop > (self.nzHeight - ((self.nzHeight / 2) / self.heightRatio)));\n                self.Eloppos = (self.mouseLeft < 0 + (((self.nzWidth / 2) / self.widthRatio)));\n                self.Eroppos = (self.mouseLeft > (self.nzWidth - (self.nzWidth / 2) / self.widthRatio - (self.options.lensBorderSize * 2)));\n            }\n\n            // if the mouse position of the slider is one of the outerbounds, then hide  window and lens\n            if (self.mouseLeft < 0 || self.mouseTop < 0 || self.mouseLeft > self.nzWidth || self.mouseTop > self.nzHeight) {\n                self.setElements('hide');\n                return;\n            }\n            //else continue with operations\n            else {\n                //lens options\n                if (self.options.showLens) {\n                    //\t\tself.showHideLens('show');\n                    //set background position of lens\n                    self.lensLeftPos = Math.floor(self.mouseLeft - self.zoomLens.width() / 2);\n                    self.lensTopPos = Math.floor(self.mouseTop - self.zoomLens.height() / 2);\n                }\n                //adjust the background position if the mouse is in one of the outer regions\n\n                //Top region\n                if (self.Etoppos) {\n                    self.lensTopPos = 0;\n                }\n                //Left Region\n                if (self.Eloppos) {\n                    self.windowLeftPos = 0;\n                    self.lensLeftPos = 0;\n                    self.tintpos = 0;\n                }\n                //Set bottom and right region for window mode\n                if (self.options.zoomType === 'window') {\n                    if (self.Eboppos) {\n                        self.lensTopPos = Math.max((self.nzHeight) - self.zoomLens.height() - (self.options.lensBorderSize * 2), 0);\n                    }\n                    if (self.Eroppos) {\n                        self.lensLeftPos = (self.nzWidth - (self.zoomLens.width()) - (self.options.lensBorderSize * 2));\n                    }\n                }\n                //Set bottom and right region for inner mode\n                if (self.options.zoomType === 'inner') {\n                    if (self.Eboppos) {\n                        self.lensTopPos = Math.max(((self.nzHeight) - (self.options.lensBorderSize * 2)), 0);\n                    }\n                    if (self.Eroppos) {\n                        self.lensLeftPos = (self.nzWidth - (self.nzWidth) - (self.options.lensBorderSize * 2));\n                    }\n                }\n                //if lens zoom\n                if (self.options.zoomType === 'lens') {\n\n                    self.windowLeftPos = ((e.pageX - self.pageOffsetX - self.nzOffset.left) * self.widthRatio - self.zoomLens.width() / 2) * -1;\n                    self.windowTopPos = ((e.pageY - self.pageOffsetY - self.nzOffset.top) * self.heightRatio - self.zoomLens.height() / 2) * -1;\n                    self.zoomLens.css({\n                        backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'\n                    });\n\n                    if (self.changeBgSize) {\n                        if (self.nzHeight > self.nzWidth) {\n                            if (self.options.zoomType === 'lens') {\n                                self.zoomLens.css({\n                                    backgroundSize: '' +\n                                    (self.largeWidth / self.newvalueheight) + 'px ' +\n                                    (self.largeHeight / self.newvalueheight) + 'px'\n                                });\n                            }\n\n                            self.zoomWindow.css({\n                                backgroundSize: '' +\n                                (self.largeWidth / self.newvalueheight) + 'px ' +\n                                (self.largeHeight / self.newvalueheight) + 'px'\n                            });\n                        }\n                        else {\n                            if (self.options.zoomType === 'lens') {\n                                self.zoomLens.css({\n                                    backgroundSize: '' +\n                                    (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                    (self.largeHeight / self.newvaluewidth) + 'px'\n                                });\n                            }\n                            self.zoomWindow.css({\n                                backgroundSize: '' +\n                                (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                (self.largeHeight / self.newvaluewidth) + 'px'\n                            });\n                        }\n                        self.changeBgSize = false;\n                    }\n\n                    self.setWindowPosition(e);\n                }\n                //if tint zoom\n                if (self.options.tint && self.options.zoomType !== 'inner') {\n                    self.setTintPosition(e);\n                }\n                //set the css background position\n                if (self.options.zoomType === 'window') {\n                    self.setWindowPosition(e);\n                }\n                if (self.options.zoomType === 'inner') {\n                    self.setWindowPosition(e);\n                }\n                if (self.options.showLens) {\n                    if (self.fullwidth && self.options.zoomType !== 'lens') {\n                        self.lensLeftPos = 0;\n                    }\n                    self.zoomLens.css({\n                        left: self.lensLeftPos,\n                        top: self.lensTopPos\n                    });\n                }\n\n            } //end else\n        },\n        showHideZoomContainer: function (change) {\n            var self = this;\n            if (change === 'show') {\n                if (self.zoomContainer) {\n                    self.zoomContainer.show();\n                }\n            }\n            if (change === 'hide') {\n                if (self.zoomContainer) {\n                    self.zoomContainer.hide();\n                }\n            }\n        },\n        showHideWindow: function (change) {\n            var self = this;\n            if (change === 'show') {\n                if (!self.isWindowActive && self.zoomWindow) {\n                    self.options.onShow(self);\n                    if (self.options.zoomWindowFadeIn) {\n                        self.zoomWindow.stop(true, true, false).fadeIn(self.options.zoomWindowFadeIn);\n                    }\n                    else {\n                        self.zoomWindow.show();\n                    }\n                    self.isWindowActive = true;\n                }\n            }\n            if (change === 'hide') {\n                if (self.isWindowActive) {\n                    if (self.options.zoomWindowFadeOut) {\n                        self.zoomWindow.stop(true, true).fadeOut(self.options.zoomWindowFadeOut, function () {\n                            if (self.loop) {\n                                //stop moving the zoom window when zoom window is faded out\n                                clearInterval(self.loop);\n                                self.loop = false;\n                            }\n                        });\n                    }\n                    else {\n                        self.zoomWindow.hide();\n                    }\n                    self.options.onHide(self);\n                    self.isWindowActive = false;\n                }\n            }\n        },\n        showHideLens: function (change) {\n            var self = this;\n            if (change === 'show') {\n                if (!self.isLensActive) {\n                    if (self.zoomLens) {\n                        if (self.options.lensFadeIn) {\n                            self.zoomLens.stop(true, true, false).fadeIn(self.options.lensFadeIn);\n                        }\n                        else {\n                            self.zoomLens.show();\n                        }\n                    }\n                    self.isLensActive = true;\n                }\n            }\n            if (change === 'hide') {\n                if (self.isLensActive) {\n                    if (self.zoomLens) {\n                        if (self.options.lensFadeOut) {\n                            self.zoomLens.stop(true, true).fadeOut(self.options.lensFadeOut);\n                        }\n                        else {\n                            self.zoomLens.hide();\n                        }\n                    }\n                    self.isLensActive = false;\n                }\n            }\n        },\n        showHideTint: function (change) {\n            var self = this;\n            if (change === 'show') {\n                if (!self.isTintActive && self.zoomTint) {\n\n                    if (self.options.zoomTintFadeIn) {\n                        self.zoomTint.css('opacity', self.options.tintOpacity).animate().stop(true, true).fadeIn('slow');\n                    }\n                    else {\n                        self.zoomTint.css('opacity', self.options.tintOpacity).animate();\n                        self.zoomTint.show();\n                    }\n                    self.isTintActive = true;\n                }\n            }\n            if (change === 'hide') {\n                if (self.isTintActive) {\n\n                    if (self.options.zoomTintFadeOut) {\n                        self.zoomTint.stop(true, true).fadeOut(self.options.zoomTintFadeOut);\n                    }\n                    else {\n                        self.zoomTint.hide();\n                    }\n                    self.isTintActive = false;\n                }\n            }\n        },\n\n        setLensPosition: function (e) {\n        },\n\n        setWindowPosition: function (e) {\n            //return obj.slice( 0, count );\n            var self = this;\n\n            if (!isNaN(self.options.zoomWindowPosition)) {\n\n                switch (self.options.zoomWindowPosition) {\n                    case 1: //done\n                        self.windowOffsetTop = (self.options.zoomWindowOffsetY);//DONE - 1\n                        self.windowOffsetLeft = (+self.nzWidth); //DONE 1, 2, 3, 4, 16\n                        break;\n                    case 2:\n                        if (self.options.zoomWindowHeight > self.nzHeight) { //positive margin\n\n                            self.windowOffsetTop = ((self.options.zoomWindowHeight / 2) - (self.nzHeight / 2)) * (-1);\n                            self.windowOffsetLeft = (self.nzWidth); //DONE 1, 2, 3, 4, 16\n                        }\n                        else { //negative margin\n                            $.noop();\n                        }\n                        break;\n                    case 3: //done\n                        self.windowOffsetTop = (self.nzHeight - self.zoomWindow.height() - (self.options.borderSize * 2)); //DONE 3,9\n                        self.windowOffsetLeft = (self.nzWidth); //DONE 1, 2, 3, 4, 16\n                        break;\n                    case 4: //done\n                        self.windowOffsetTop = (self.nzHeight); //DONE - 4,5,6,7,8\n                        self.windowOffsetLeft = (self.nzWidth); //DONE 1, 2, 3, 4, 16\n                        break;\n                    case 5: //done\n                        self.windowOffsetTop = (self.nzHeight); //DONE - 4,5,6,7,8\n                        self.windowOffsetLeft = (self.nzWidth - self.zoomWindow.width() - (self.options.borderSize * 2)); //DONE - 5,15\n                        break;\n                    case 6:\n                        if (self.options.zoomWindowHeight > self.nzHeight) { //positive margin\n                            self.windowOffsetTop = (self.nzHeight);  //DONE - 4,5,6,7,8\n\n                            self.windowOffsetLeft = ((self.options.zoomWindowWidth / 2) - (self.nzWidth / 2) + (self.options.borderSize * 2)) * (-1);\n                        }\n                        else { //negative margin\n                            $.noop();\n                        }\n\n                        break;\n                    case 7: //done\n                        self.windowOffsetTop = (self.nzHeight);  //DONE - 4,5,6,7,8\n                        self.windowOffsetLeft = 0; //DONE 7, 13\n                        break;\n                    case 8: //done\n                        self.windowOffsetTop = (self.nzHeight); //DONE - 4,5,6,7,8\n                        self.windowOffsetLeft = (self.zoomWindow.width() + (self.options.borderSize * 2)) * (-1);  //DONE 8,9,10,11,12\n                        break;\n                    case 9:  //done\n                        self.windowOffsetTop = (self.nzHeight - self.zoomWindow.height() - (self.options.borderSize * 2)); //DONE 3,9\n                        self.windowOffsetLeft = (self.zoomWindow.width() + (self.options.borderSize * 2)) * (-1);  //DONE 8,9,10,11,12\n                        break;\n                    case 10:\n                        if (self.options.zoomWindowHeight > self.nzHeight) { //positive margin\n\n                            self.windowOffsetTop = ((self.options.zoomWindowHeight / 2) - (self.nzHeight / 2)) * (-1);\n                            self.windowOffsetLeft = (self.zoomWindow.width() + (self.options.borderSize * 2)) * (-1);  //DONE 8,9,10,11,12\n                        }\n                        else { //negative margin\n                            $.noop();\n                        }\n                        break;\n                    case 11:\n                        self.windowOffsetTop = (self.options.zoomWindowOffsetY);\n                        self.windowOffsetLeft = (self.zoomWindow.width() + (self.options.borderSize * 2)) * (-1);  //DONE 8,9,10,11,12\n                        break;\n                    case 12: //done\n                        self.windowOffsetTop = (self.zoomWindow.height() + (self.options.borderSize * 2)) * (-1); //DONE 12,13,14,15,16\n                        self.windowOffsetLeft = (self.zoomWindow.width() + (self.options.borderSize * 2)) * (-1);  //DONE 8,9,10,11,12\n                        break;\n                    case 13: //done\n                        self.windowOffsetTop = (self.zoomWindow.height() + (self.options.borderSize * 2)) * (-1); //DONE 12,13,14,15,16\n                        self.windowOffsetLeft = (0); //DONE 7, 13\n                        break;\n                    case 14:\n                        if (self.options.zoomWindowHeight > self.nzHeight) { //positive margin\n                            self.windowOffsetTop = (self.zoomWindow.height() + (self.options.borderSize * 2)) * (-1); //DONE 12,13,14,15,16\n\n                            self.windowOffsetLeft = ((self.options.zoomWindowWidth / 2) - (self.nzWidth / 2) + (self.options.borderSize * 2)) * (-1);\n                        }\n                        else { //negative margin\n                            $.noop();\n                        }\n                        break;\n                    case 15://done\n                        self.windowOffsetTop = (self.zoomWindow.height() + (self.options.borderSize * 2)) * (-1); //DONE 12,13,14,15,16\n                        self.windowOffsetLeft = (self.nzWidth - self.zoomWindow.width() - (self.options.borderSize * 2)); //DONE - 5,15\n                        break;\n                    case 16:  //done\n                        self.windowOffsetTop = (self.zoomWindow.height() + (self.options.borderSize * 2)) * (-1); //DONE 12,13,14,15,16\n                        self.windowOffsetLeft = (self.nzWidth); //DONE 1, 2, 3, 4, 16\n                        break;\n                    default: //done\n                        self.windowOffsetTop = (self.options.zoomWindowOffsetY);//DONE - 1\n                        self.windowOffsetLeft = (self.nzWidth); //DONE 1, 2, 3, 4, 16\n                }\n            } //end isNAN\n            else {\n                // For BC purposes, treat passed element as ID if element not found\n                self.externalContainer = $(self.options.zoomWindowPosition);\n                if (!self.externalContainer.length) {\n                    self.externalContainer = $('#' + self.options.zoomWindowPosition);\n                }\n\n                self.externalContainerWidth = self.externalContainer.width();\n                self.externalContainerHeight = self.externalContainer.height();\n                self.externalContainerOffset = self.externalContainer.offset();\n\n                self.windowOffsetTop = self.externalContainerOffset.top;//DONE - 1\n                self.windowOffsetLeft = self.externalContainerOffset.left; //DONE 1, 2, 3, 4, 16\n\n            }\n            self.isWindowSet = true;\n            self.windowOffsetTop = self.windowOffsetTop + self.options.zoomWindowOffsetY;\n            self.windowOffsetLeft = self.windowOffsetLeft + self.options.zoomWindowOffsetX;\n\n            self.zoomWindow.css({\n                top: self.windowOffsetTop,\n                left: self.windowOffsetLeft\n            });\n\n            if (self.options.zoomType === 'inner') {\n                self.zoomWindow.css({\n                    top: 0,\n                    left: 0\n                });\n\n            }\n\n            self.windowLeftPos = ((e.pageX - self.pageOffsetX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1;\n            self.windowTopPos = ((e.pageY - self.pageOffsetY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1;\n            if (self.Etoppos) {\n                self.windowTopPos = 0;\n            }\n            if (self.Eloppos) {\n                self.windowLeftPos = 0;\n            }\n            if (self.Eboppos) {\n                self.windowTopPos = (self.largeHeight / self.currentZoomLevel - self.zoomWindow.height()) * (-1);\n            }\n            if (self.Eroppos) {\n                self.windowLeftPos = ((self.largeWidth / self.currentZoomLevel - self.zoomWindow.width()) * (-1));\n            }\n\n            //stops micro movements\n            if (self.fullheight) {\n                self.windowTopPos = 0;\n            }\n            if (self.fullwidth) {\n                self.windowLeftPos = 0;\n            }\n\n            //set the css background position\n            if (self.options.zoomType === 'window' || self.options.zoomType === 'inner') {\n\n                if (self.zoomLock === 1) {\n                    //overrides for images not zoomable\n                    if (self.widthRatio <= 1) {\n                        self.windowLeftPos = 0;\n                    }\n                    if (self.heightRatio <= 1) {\n                        self.windowTopPos = 0;\n                    }\n                }\n                // adjust images less than the window height\n\n                // if (self.options.zoomType === 'window') {\n                //     if (self.largeHeight < self.options.zoomWindowHeight) {\n                //         self.windowTopPos = 0;\n                //     }\n                //     if (self.largeWidth < self.options.zoomWindowWidth) {\n                //         self.windowLeftPos = 0;\n                //     }\n                // }\n                //set the zoomwindow background position\n                if (self.options.easing) {\n\n                    //     if(self.changeZoom){\n                    //           clearInterval(self.loop);\n                    //           self.changeZoom = false;\n                    //           self.loop = false;\n\n                    //            }\n                    //set the pos to 0 if not set\n                    if (!self.xp) {\n                        self.xp = 0;\n                    }\n                    if (!self.yp) {\n                        self.yp = 0;\n                    }\n                    var interval = 16;\n                    var easingInterval = parseInt(self.options.easing);\n                    if (typeof easingInterval === 'number' && isFinite(easingInterval) && Math.floor(easingInterval) === easingInterval) {\n                        interval = easingInterval;\n                    }\n                    //if loop not already started, then run it\n                    if (!self.loop) {\n                        self.loop = setInterval(function () {\n                            //using zeno's paradox\n\n                            self.xp += (self.windowLeftPos - self.xp) / self.options.easingAmount;\n                            self.yp += (self.windowTopPos - self.yp) / self.options.easingAmount;\n                            if (self.scrollingLock) {\n\n                                clearInterval(self.loop);\n                                self.xp = self.windowLeftPos;\n                                self.yp = self.windowTopPos;\n\n                                self.xp = ((e.pageX - self.pageOffsetX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * (-1);\n                                self.yp = (((e.pageY - self.pageOffsetY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * (-1));\n\n                                if (self.changeBgSize) {\n                                    if (self.nzHeight > self.nzWidth) {\n                                        if (self.options.zoomType === 'lens') {\n                                            self.zoomLens.css({\n                                                backgroundSize: '' +\n                                                    (self.largeWidth / self.newvalueheight) + 'px ' +\n                                                    (self.largeHeight / self.newvalueheight) + 'px'\n                                            });\n                                        }\n                                        self.zoomWindow.css({\n                                            backgroundSize: '' +\n                                                (self.largeWidth / self.newvalueheight) + 'px ' +\n                                                (self.largeHeight / self.newvalueheight) + 'px'\n                                        });\n                                    }\n                                    else {\n                                        if (self.options.zoomType !== 'lens') {\n                                            self.zoomLens.css({\n                                                backgroundSize: '' +\n                                                    (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                                    (self.largeHeight / self.newvalueheight) + 'px'\n                                            });\n                                        }\n                                        self.zoomWindow.css({\n                                            backgroundSize: '' +\n                                                (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                                (self.largeHeight / self.newvaluewidth) + 'px'\n                                        });\n                                    }\n\n                                    /*\n                                     if(!self.bgxp){self.bgxp = self.largeWidth/self.newvalue;}\n                                     if(!self.bgyp){self.bgyp = self.largeHeight/self.newvalue ;}\n                                     if (!self.bgloop){\n                                     self.bgloop = setInterval(function(){\n\n                                     self.bgxp += (self.largeWidth/self.newvalue  - self.bgxp) / self.options.easingAmount;\n                                     self.bgyp += (self.largeHeight/self.newvalue  - self.bgyp) / self.options.easingAmount;\n\n                                     self.zoomWindow.css('background-size', self.bgxp + 'px ' + self.bgyp + 'px' );\n\n\n                                     }, 16);\n\n                                     }\n                                     */\n                                    self.changeBgSize = false;\n                                }\n\n                                self.zoomWindow.css({\n                                    backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'\n                                });\n                                self.scrollingLock = false;\n                                self.loop = false;\n\n                            }\n                            else if (Math.round(Math.abs(self.xp - self.windowLeftPos) + Math.abs(self.yp - self.windowTopPos)) < 1) {\n                                //stops micro movements\n                                clearInterval(self.loop);\n                                self.zoomWindow.css({\n                                    backgroundPosition: '' + self.windowLeftPos + 'px ' + self.windowTopPos + 'px'\n                                });\n                                self.loop = false;\n                            }\n                            else {\n                                if (self.changeBgSize) {\n                                    if (self.nzHeight > self.nzWidth) {\n                                        if (self.options.zoomType === 'lens') {\n                                            self.zoomLens.css({\n                                                backgroundSize: '' +\n                                                (self.largeWidth / self.newvalueheight) + 'px ' +\n                                                (self.largeHeight / self.newvalueheight) + 'px'\n                                            });\n                                        }\n                                        self.zoomWindow.css({\n                                            backgroundSize: '' +\n                                            (self.largeWidth / self.newvalueheight) + 'px ' +\n                                            (self.largeHeight / self.newvalueheight) + 'px'\n                                        });\n                                    }\n                                    else {\n                                        if (self.options.zoomType !== 'lens') {\n                                            self.zoomLens.css({\n                                                backgroundSize: '' +\n                                                (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                                (self.largeHeight / self.newvaluewidth) + 'px'\n                                            });\n                                        }\n                                        self.zoomWindow.css({\n                                            backgroundSize: '' +\n                                            (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                            (self.largeHeight / self.newvaluewidth) + 'px'\n                                        });\n                                    }\n                                    self.changeBgSize = false;\n                                }\n\n                                self.zoomWindow.css({\n                                    backgroundPosition: '' + self.xp + 'px ' + self.yp + 'px'\n                                });\n                            }\n                        }, interval);\n                    }\n                }\n                else {\n                    if (self.changeBgSize) {\n                        if (self.nzHeight > self.nzWidth) {\n                            if (self.options.zoomType === 'lens') {\n                                self.zoomLens.css({\n                                    backgroundSize: '' +\n                                    (self.largeWidth / self.newvalueheight) + 'px ' +\n                                    (self.largeHeight / self.newvalueheight) + 'px'\n                                });\n                            }\n\n                            self.zoomWindow.css({\n                                backgroundSize: '' +\n                                (self.largeWidth / self.newvalueheight) + 'px ' +\n                                (self.largeHeight / self.newvalueheight) + 'px'\n                            });\n                        }\n                        else {\n                            if (self.options.zoomType === 'lens') {\n                                self.zoomLens.css({\n                                    backgroundSize: '' +\n                                    (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                    (self.largeHeight / self.newvaluewidth) + 'px'\n                                });\n                            }\n                            if ((self.largeHeight / self.newvaluewidth) < self.options.zoomWindowHeight) {\n\n                                self.zoomWindow.css({\n                                    backgroundSize: '' +\n                                    (self.largeWidth / self.newvaluewidth) + 'px ' +\n                                    (self.largeHeight / self.newvaluewidth) + 'px'\n                                });\n                            }\n                            else {\n\n                                self.zoomWindow.css({\n                                    backgroundSize: '' +\n                                    (self.largeWidth / self.newvalueheight) + 'px ' +\n                                    (self.largeHeight / self.newvalueheight) + 'px'\n                                });\n                            }\n\n                        }\n                        self.changeBgSize = false;\n                    }\n\n                    self.zoomWindow.css({\n                        backgroundPosition: '' +\n                        self.windowLeftPos + 'px ' +\n                        self.windowTopPos + 'px'\n                    });\n                }\n            }\n        },\n\n        setTintPosition: function (e) {\n            var self = this;\n            var zoomLensWidth = self.zoomLens.width();\n            var zoomLensHeight = self.zoomLens.height();\n            self.updateOffset(self);\n            self.tintpos = ((e.pageX - self.pageOffsetX - self.nzOffset.left) - (zoomLensWidth / 2)) * -1;\n            self.tintposy = ((e.pageY - self.pageOffsetY - self.nzOffset.top) - zoomLensHeight / 2) * -1;\n            if (self.Etoppos) {\n                self.tintposy = 0;\n            }\n            if (self.Eloppos) {\n                self.tintpos = 0;\n            }\n            if (self.Eboppos) {\n                self.tintposy = (self.nzHeight - zoomLensHeight - (self.options.lensBorderSize * 2)) * (-1);\n            }\n            if (self.Eroppos) {\n                self.tintpos = ((self.nzWidth - zoomLensWidth - (self.options.lensBorderSize * 2)) * (-1));\n            }\n            if (self.options.tint) {\n                //stops micro movements\n                if (self.fullheight) {\n                    self.tintposy = 0;\n\n                }\n                if (self.fullwidth) {\n                    self.tintpos = 0;\n\n                }\n                self.zoomTintImage.css({\n                    left: self.tintpos,\n                    top: self.tintposy\n                });\n            }\n        },\n\n        swaptheimage: function (smallimage, largeimage) {\n            var self = this;\n            var newImg = new Image();\n\n            if (self.options.loadingIcon && !self.spinner) {\n                var styleAttr = {\n                    background: 'url(\"' + self.options.loadingIcon + '\") no-repeat',\n                    height: self.nzHeight,\n                    width: self.nzWidth,\n                    zIndex: 2000,\n                    position: 'absolute',\n                    backgroundPosition: 'center center',\n                };\n                if (self.options.zoomType === 'inner') {\n                    styleAttr.setProperty('top', 0);\n                }\n                self.spinner = $('<div class=\"ezp-spinner\"></div>')\n                  .css(styleAttr);\n                self.$elem.after(self.spinner);\n            } else if (self.spinner) {\n                self.spinner.show();\n            }\n\n            self.options.onImageSwap(self.$elem);\n\n            newImg.onload = function () {\n                self.largeWidth = newImg.width;\n                self.largeHeight = newImg.height;\n                self.zoomImage = largeimage;\n                self.zoomWindow.css({\n                    backgroundSize: '' + self.largeWidth + 'px ' + self.largeHeight + 'px'\n                });\n\n                self.swapAction(smallimage, largeimage);\n                return;\n            };\n            self.setImageSource(newImg, largeimage);  // this must be done AFTER setting onload\n        },\n\n        swapAction: function (smallimage, largeimage) {\n            var self = this;\n            var elemWidth = self.$elem.width();\n            var elemHeight = self.$elem.height();\n            var newImg2 = new Image();\n            newImg2.onload = function () {\n                //re-calculate values\n                self.nzHeight = newImg2.height;\n                self.nzWidth = newImg2.width;\n                self.options.onImageSwapComplete(self.$elem);\n\n                self.doneCallback();\n                return;\n            };\n            self.setImageSource(newImg2, smallimage);\n\n            //reset the zoomlevel to that initially set in options\n            self.currentZoomLevel = self.options.zoomLevel;\n            self.options.maxZoomLevel = false;\n\n            //swaps the main image\n            //self.$elem.attr('src',smallimage);\n            //swaps the zoom image\n            if (self.options.zoomType === 'lens') {\n                self.zoomLens.css('background-image', 'url(\"' + largeimage + '\")');\n            }\n            if (self.options.zoomType === 'window') {\n                self.zoomWindow.css('background-image', 'url(\"' + largeimage + '\")');\n            }\n            if (self.options.zoomType === 'inner') {\n                self.zoomWindow.css('background-image', 'url(\"' + largeimage + '\")');\n            }\n\n            self.currentImage = largeimage;\n\n            if (self.options.imageCrossfade) {\n                var oldImg = self.$elem;\n                var newImg = oldImg.clone();\n                self.$elem.attr('src', smallimage);\n                self.$elem.after(newImg);\n                newImg.stop(true).fadeOut(self.options.imageCrossfade, function () {\n                    $(this).remove();\n                });\n\n                // if(self.options.zoomType === 'inner'){\n                //remove any attributes on the cloned image so we can resize later\n                self.$elem.width('auto').removeAttr('width');\n                self.$elem.height('auto').removeAttr('height');\n                //   }\n\n                oldImg.fadeIn(self.options.imageCrossfade);\n\n                if (self.options.tint && self.options.zoomType !== 'inner') {\n\n                    var oldImgTint = self.zoomTintImage;\n                    var newImgTint = oldImgTint.clone();\n                    self.zoomTintImage.attr('src', largeimage);\n                    self.zoomTintImage.after(newImgTint);\n                    newImgTint.stop(true).fadeOut(self.options.imageCrossfade, function () {\n                        $(this).remove();\n                    });\n\n                    oldImgTint.fadeIn(self.options.imageCrossfade);\n\n                    //self.zoomTintImage.attr('width',elem.data('image'));\n\n                    //resize the tint window\n                    self.zoomTint.css({\n                        height: elemHeight,\n                        width: elemWidth\n                    });\n                }\n\n                self.zoomContainer.css({\n                    'height': elemHeight,\n                    'width': elemWidth\n                });\n\n                if (self.options.zoomType === 'inner') {\n                    if (!self.options.constrainType) {\n                        self.zoomWrap.parent().css({\n                            'height': elemHeight,\n                            'width': elemWidth\n                        });\n\n                        self.zoomWindow.css({\n                            'height': elemHeight,\n                            'width': elemWidth\n                        });\n                    }\n                }\n\n                if (self.options.imageCrossfade) {\n                    self.zoomWrap.css({\n                        'height': elemHeight,\n                        'width': elemWidth\n                    });\n                }\n            }\n            else {\n                self.$elem.attr('src', smallimage);\n                if (self.options.tint) {\n                    self.zoomTintImage.attr('src', largeimage);\n                    //self.zoomTintImage.attr('width',elem.data('image'));\n                    self.zoomTintImage.attr('height', elemHeight);\n                    //self.zoomTintImage.attr('src') = elem.data('image');\n                    self.zoomTintImage.css('height', elemHeight);\n                    self.zoomTint.css('height', elemHeight);\n\n                }\n                self.zoomContainer.css({\n                    'height': elemHeight,\n                    'width': elemWidth\n                });\n\n                if (self.options.imageCrossfade) {\n                    self.zoomWrap.css({\n                        'height': elemHeight,\n                        'width': elemWidth\n                    });\n                }\n            }\n            if (self.options.constrainType) {\n\n                //This will contrain the image proportions\n                if (self.options.constrainType === 'height') {\n\n                    var autoWDimension = {\n                        'height': self.options.constrainSize,\n                        'width': 'auto'\n                    };\n                    self.zoomContainer.css(autoWDimension);\n\n                    if (self.options.imageCrossfade) {\n                        self.zoomWrap.css(autoWDimension);\n                        self.constwidth = self.zoomWrap.width();\n                    }\n                    else {\n                        self.$elem.css(autoWDimension);\n                        self.constwidth = elemWidth;\n                    }\n\n                    var constWDim = {\n                        'height': self.options.constrainSize,\n                        'width': self.constwidth\n                    };\n                    if (self.options.zoomType === 'inner') {\n\n                        self.zoomWrap.parent().css(constWDim);\n                        self.zoomWindow.css(constWDim);\n                    }\n                    if (self.options.tint) {\n                        self.tintContainer.css(constWDim);\n                        self.zoomTint.css(constWDim);\n                        self.zoomTintImage.css(constWDim);\n                    }\n\n                }\n                if (self.options.constrainType === 'width') {\n                    var autoHDimension = {\n                        'height': 'auto',\n                        'width': self.options.constrainSize\n                    };\n                    self.zoomContainer.css(autoHDimension);\n\n                    if (self.options.imageCrossfade) {\n                        self.zoomWrap.css(autoHDimension);\n                        self.constheight = self.zoomWrap.height();\n                    }\n                    else {\n                        self.$elem.css(autoHDimension);\n                        self.constheight = elemHeight;\n                    }\n\n                    var constHDim = {\n                        'height': self.constheight,\n                        'width': self.options.constrainSize\n                    };\n                    if (self.options.zoomType === 'inner') {\n                        self.zoomWrap.parent().css(constHDim);\n                        self.zoomWindow.css(constHDim);\n                    }\n                    if (self.options.tint) {\n                        self.tintContainer.css(constHDim);\n                        self.zoomTint.css(constHDim);\n                        self.zoomTintImage.css(constHDim);\n                    }\n                }\n            }\n        },\n\n        doneCallback: function () {\n            var self = this;\n            if (self.options.loadingIcon && !!self.spinner && !!self.spinner.length) {\n                self.spinner.hide();\n            }\n\n            self.updateOffset(self);\n            self.nzWidth = self.$elem.width();\n            self.nzHeight = self.$elem.height();\n\n            // reset the zoomlevel back to default\n            self.currentZoomLevel = self.options.zoomLevel;\n\n            //ratio of the large to small image\n            self.widthRatio = self.largeWidth / self.nzWidth;\n            self.heightRatio = self.largeHeight / self.nzHeight;\n\n            //NEED TO ADD THE LENS SIZE FOR ROUND\n            // adjust images less than the window height\n            if (self.options.zoomType === 'window') {\n\n                if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {\n                    self.lensHeight = self.nzHeight;\n\n                }\n                else {\n                    self.lensHeight = self.options.zoomWindowHeight / self.heightRatio;\n                }\n\n                if (self.nzWidth < self.options.zoomWindowWidth) {\n                    self.lensWidth = self.nzWidth;\n                }\n                else {\n                    self.lensWidth = self.options.zoomWindowWidth / self.widthRatio;\n                }\n\n                if (self.zoomLens) {\n                    self.zoomLens.css({\n                        'width': self.lensWidth,\n                        'height': self.lensHeight\n                    });\n                }\n            }\n        },\n\n        getCurrentImage: function () {\n            var self = this;\n            return self.zoomImage;\n        },\n\n        getGalleryList: function () {\n            var self = this;\n            //loop through the gallery options and set them in list for fancybox\n            self.gallerylist = [];\n            if (self.options.gallery) {\n                $('#' + self.options.gallery + ' a').each(function () {\n\n                    var imgSrc = '';\n                    if ($(this).data(self.options.attrImageZoomSrc)) {\n                        imgSrc = $(this).data(self.options.attrImageZoomSrc);\n                    }\n                    else if ($(this).data('image')) {\n                        imgSrc = $(this).data('image');\n                    }\n                    //put the current image at the start\n                    if (imgSrc === self.zoomImage) {\n                        self.gallerylist.unshift({\n                            href: '' + imgSrc + '',\n                            title: $(this).find('img').attr('title')\n                        });\n                    }\n                    else {\n                        self.gallerylist.push({\n                            href: '' + imgSrc + '',\n                            title: $(this).find('img').attr('title')\n                        });\n                    }\n                });\n            }\n            //if no gallery - return current image\n            else {\n                self.gallerylist.push({\n                    href: '' + self.zoomImage + '',\n                    title: $(this).find('img').attr('title')\n                });\n            }\n            return self.gallerylist;\n        },\n\n        changeZoomLevel: function (value) {\n            var self = this;\n\n            //flag a zoom, so can adjust the easing during setPosition\n            self.scrollingLock = true;\n\n            //round to two decimal places\n            self.newvalue = parseFloat(value).toFixed(2);\n            var newvalue = self.newvalue;\n\n            //maxwidth & Maxheight of the image\n            var maxheightnewvalue = self.largeHeight / ((self.options.zoomWindowHeight / self.nzHeight) * self.nzHeight);\n            var maxwidthtnewvalue = self.largeWidth / ((self.options.zoomWindowWidth / self.nzWidth) * self.nzWidth);\n\n            //calculate new heightratio\n            if (self.options.zoomType !== 'inner') {\n                if (maxheightnewvalue <= newvalue) {\n                    self.heightRatio = (self.largeHeight / maxheightnewvalue) / self.nzHeight;\n                    self.newvalueheight = maxheightnewvalue;\n                    self.fullheight = true;\n                }\n                else {\n                    self.heightRatio = (self.largeHeight / newvalue) / self.nzHeight;\n                    self.newvalueheight = newvalue;\n                    self.fullheight = false;\n                }\n\n                // calculate new width ratio\n\n                if (maxwidthtnewvalue <= newvalue) {\n                    self.widthRatio = (self.largeWidth / maxwidthtnewvalue) / self.nzWidth;\n                    self.newvaluewidth = maxwidthtnewvalue;\n                    self.fullwidth = true;\n                }\n                else {\n                    self.widthRatio = (self.largeWidth / newvalue) / self.nzWidth;\n                    self.newvaluewidth = newvalue;\n                    self.fullwidth = false;\n                }\n                if (self.options.zoomType === 'lens') {\n                    if (maxheightnewvalue <= newvalue) {\n                        self.fullwidth = true;\n                        self.newvaluewidth = maxheightnewvalue;\n                    } else {\n                        self.widthRatio = (self.largeWidth / newvalue) / self.nzWidth;\n                        self.newvaluewidth = newvalue;\n\n                        self.fullwidth = false;\n                    }\n                }\n            }\n\n            if (self.options.zoomType === 'inner') {\n                maxheightnewvalue = parseFloat(self.largeHeight / self.nzHeight).toFixed(2);\n                maxwidthtnewvalue = parseFloat(self.largeWidth / self.nzWidth).toFixed(2);\n                if (newvalue > maxheightnewvalue) {\n                    newvalue = maxheightnewvalue;\n                }\n                if (newvalue > maxwidthtnewvalue) {\n                    newvalue = maxwidthtnewvalue;\n                }\n\n                if (maxheightnewvalue <= newvalue) {\n                    self.heightRatio = (self.largeHeight / newvalue) / self.nzHeight;\n                    if (newvalue > maxheightnewvalue) {\n                        self.newvalueheight = maxheightnewvalue;\n                    } else {\n                        self.newvalueheight = newvalue;\n                    }\n                    self.fullheight = true;\n                }\n                else {\n                    self.heightRatio = (self.largeHeight / newvalue) / self.nzHeight;\n\n                    if (newvalue > maxheightnewvalue) {\n\n                        self.newvalueheight = maxheightnewvalue;\n                    } else {\n                        self.newvalueheight = newvalue;\n                    }\n                    self.fullheight = false;\n                }\n\n                if (maxwidthtnewvalue <= newvalue) {\n\n                    self.widthRatio = (self.largeWidth / newvalue) / self.nzWidth;\n                    if (newvalue > maxwidthtnewvalue) {\n\n                        self.newvaluewidth = maxwidthtnewvalue;\n                    } else {\n                        self.newvaluewidth = newvalue;\n                    }\n\n                    self.fullwidth = true;\n                }\n                else {\n                    self.widthRatio = (self.largeWidth / newvalue) / self.nzWidth;\n                    self.newvaluewidth = newvalue;\n                    self.fullwidth = false;\n                }\n            } //end inner\n            var scrcontinue = false;\n\n            if (self.options.zoomType === 'inner') {\n                if (self.nzWidth >= self.nzHeight) {\n                    if (self.newvaluewidth <= maxwidthtnewvalue) {\n                        scrcontinue = true;\n                    }\n                    else {\n                        scrcontinue = false;\n                        self.fullheight = true;\n                        self.fullwidth = true;\n                    }\n                }\n                if (self.nzHeight > self.nzWidth) {\n                    if (self.newvaluewidth <= maxwidthtnewvalue) {\n                        scrcontinue = true;\n                    }\n                    else {\n                        scrcontinue = false;\n                        self.fullheight = true;\n                        self.fullwidth = true;\n                    }\n                }\n            }\n\n            if (self.options.zoomType !== 'inner') {\n                scrcontinue = true;\n            }\n\n            if (scrcontinue) {\n                self.zoomLock = 0;\n                self.changeZoom = true;\n\n                //if lens height is less than image height\n                if (((self.options.zoomWindowHeight) / self.heightRatio) <= self.nzHeight) {\n                    self.currentZoomLevel = self.newvalueheight;\n                    if (self.options.zoomType !== 'lens' && self.options.zoomType !== 'inner') {\n                        self.changeBgSize = true;\n                        self.zoomLens.css({\n                            height: self.options.zoomWindowHeight / self.heightRatio\n                        });\n                    }\n                    if (self.options.zoomType === 'lens' || self.options.zoomType === 'inner') {\n                        self.changeBgSize = true;\n                    }\n                }\n\n                if ((self.options.zoomWindowWidth / self.widthRatio) <= self.nzWidth) {\n                    if (self.options.zoomType !== 'inner') {\n                        if (self.newvaluewidth > self.newvalueheight) {\n                            self.currentZoomLevel = self.newvaluewidth;\n                        }\n                    }\n\n                    if (self.options.zoomType !== 'lens' && self.options.zoomType !== 'inner') {\n                        self.changeBgSize = true;\n\n                        self.zoomLens.css({\n                            width: self.options.zoomWindowWidth / self.widthRatio\n                        });\n                    }\n                    if (self.options.zoomType === 'lens' || self.options.zoomType === 'inner') {\n                        self.changeBgSize = true;\n                    }\n\n                }\n                if (self.options.zoomType === 'inner') {\n                    self.changeBgSize = true;\n\n                    if (self.nzWidth > self.nzHeight) {\n                        self.currentZoomLevel = self.newvaluewidth;\n                    }\n                    else if (self.nzHeight >= self.nzWidth) {\n                        self.currentZoomLevel = self.newvaluewidth;\n                    }\n                }\n            }      //under\n\n            //sets the boundry change, called in setWindowPos\n            self.setPosition(self.currentLoc);\n            //\n        },\n\n        closeAll: function () {\n            var self = this;\n            if (self.zoomWindow) {\n                self.zoomWindow.hide();\n            }\n            if (self.zoomLens) {\n                self.zoomLens.hide();\n            }\n            if (self.zoomTint) {\n                self.zoomTint.hide();\n            }\n        },\n        updateOffset: function (self) {\n            if (self.options.zoomContainerAppendTo !== 'body') {\n                self.nzOffset = self.$elem.offset();\n                var appendedPosition = $(self.options.zoomContainerAppendTo).offset();\n                self.nzOffset.top = self.$elem.offset().top - appendedPosition.top;\n                self.nzOffset.left = self.$elem.offset().left - appendedPosition.left;\n\n                // NOTE: When initialising ezPlus on an element\n                // present inside a dialog the positions will\n                // not be correct unless the dialog occupies the\n                // entire viewport. These page offsets will help\n                // zoom lens and zoom window to be positioned\n                // correctly\n\n                // Update page offsets\n                self.pageOffsetX = appendedPosition.left;\n                self.pageOffsetY = appendedPosition.top;\n            } else {\n                self.nzOffset = self.$elem.offset();\n\n                // Update page offsets\n                self.pageOffsetX = 0;\n                self.pageOffsetY = 0;\n            }\n        },\n\n        changeState: function (value) {\n            var self = this;\n            if (value === 'enable') {\n                self.options.zoomEnabled = true;\n            }\n            if (value === 'disable') {\n                self.options.zoomEnabled = false;\n            }\n        },\n\n        responsiveConfig: function (options) {\n            if (options.respond && options.respond.length > 0) {\n                return $.extend({}, options, this.configByScreenWidth(options));\n            }\n            return options;\n        },\n\n        configByScreenWidth: function (options) {\n            var screenWidth = $(window).width();\n\n            var config = $.grep(options.respond, function (item) {\n                var range = item.range.split('-');\n                return (screenWidth >= range[0]) && (screenWidth <= range[1]);\n            });\n\n            if (config.length > 0) {\n                return config[0];\n            } else {\n                return options;\n            }\n        }\n    };\n\n    $.fn.ezPlus = function (options) {\n        return this.each(function () {\n            var elevate = Object.create(EZP);\n\n            elevate.init(options, this);\n\n            $.data(this, 'ezPlus', elevate);\n\n        });\n    };\n\n    $.fn.ezPlus.options = {\n        container: 'ZoomContainer',\n        attrImageZoomSrc: 'zoom-image', // attribute to plugin use for zoom\n        borderColour: '#888',\n        borderSize: 4,\n        constrainSize: false,  //in pixels the dimensions you want to constrain on\n        constrainType: false,  //width or height\n        containLensZoom: false,\n        cursor: 'inherit', // user should set to what they want the cursor as, if they have set a click function\n        debug: false,\n        easing: false,\n        easingAmount: 12,\n        enabled: true,\n\n        gallery: false,\n        galleryActiveClass: 'zoomGalleryActive',\n        gallerySelector: false,\n        galleryItem: 'a',\n        galleryEvent: 'click',\n\n        imageCrossfade: false,\n\n        lensBorderColour: '#000',\n        lensBorderSize: 1,\n        lensColour: 'white', //colour of the lens background\n        lensFadeIn: false,\n        lensFadeOut: false,\n        lensOpacity: 0.4, //opacity of the lens\n        lensShape: 'square', //can be 'round'\n        lensSize: 200,\n        lenszoom: false,\n\n        loadingIcon: false, //http://www.example.com/spinner.gif\n\n        // This change will allow to decide if you want to decrease\n        // zoom of one of the dimensions once the other reached it's top value,\n        // or keep the aspect ratio, default behaviour still being as always,\n        // allow to continue zooming out, so it keeps retrocompatibility.\n        mantainZoomAspectRatio: false,\n        maxZoomLevel: false,\n        minZoomLevel: 1.01,\n\n        onComplete: $.noop,\n        onDestroy: $.noop,\n        onImageClick: $.noop,\n        onImageSwap: $.noop,\n        onImageSwapComplete: $.noop,\n        onShow: $.noop,\n        onHide: $.noop,\n        onZoomedImageLoaded: $.noop,\n\n        preloading: 1, //by default, load all the images, if 0, then only load images after activated (PLACEHOLDER FOR NEXT VERSION)\n        respond: [],\n        responsive: true,\n        scrollZoom: false, //allow zoom on mousewheel, true to activate\n        scrollZoomIncrement: 0.1,  //steps of the scrollzoom\n        showLens: true,\n        tint: false, //enable the tinting\n        tintColour: '#333', //default tint color, can be anything, red, #ccc, rgb(0,0,0)\n        tintOpacity: 0.4, //opacity of the tint\n        touchEnabled: true,\n\n        zoomActivation: 'hover', // Can also be click (PLACEHOLDER FOR NEXT VERSION)\n        zoomContainerAppendTo: 'body', //zoom container parent selector\n        zoomId: -1, // identifier for the zoom container\n        zoomLevel: 1, //default zoom level of image\n        zoomTintFadeIn: false,\n        zoomTintFadeOut: false,\n        zoomType: 'window', //window is default,  also 'lens' available -\n        zoomWindowAlwaysShow: false,\n        zoomWindowBgColour: '#fff',\n        zoomWindowFadeIn: false,\n        zoomWindowFadeOut: false,\n        zoomWindowHeight: 400,\n        zoomWindowOffsetX: 0,\n        zoomWindowOffsetY: 0,\n        zoomWindowPosition: 1, //Possible values: 1-16, but we can also position with a selector string.\n        zoomWindowWidth: 400,\n        zoomEnabled: true, //false disables zoomwindow from showing\n        zIndex: 999\n    };\n\n})(window.jQuery, window, document);\n"],"file":"plugins/jquery.ez-plus.js"}